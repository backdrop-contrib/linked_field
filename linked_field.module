<?php

/**
 * @file
 * Module that gives you a field formatter, which enables you to link field
 * contents to a destination.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function linked_field_field_formatter_info_alter(&$infos) {
  foreach ($infos as &$info) {
    $info['settings'] += array(
      'linked_field' => array(
        'linked' => 0,
        'destination' => '',
        'advanced' => array(
          'target' => '',
          'class' => '',
          'rel' => '',
          'text' => '',
        ),
      ),
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function linked_field_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if (!count($settings['linked_field']) || !$settings['linked_field']['linked']) {
    $summary = ' ';
    return;
  }

  // Normalize the settings.
  $linked = $settings['linked_field']['linked'];
  $destination = $settings['linked_field']['destination'];
  $title = isset($settings['linked_field']['advanced']['title']) ? $settings['linked_field']['advanced']['title'] : '';
  $target = isset($settings['linked_field']['advanced']['target']) ? $settings['linked_field']['advanced']['target'] : '';
  $class = isset($settings['linked_field']['advanced']['class']) ? $settings['linked_field']['advanced']['class'] : '';
  $rel = isset($settings['linked_field']['advanced']['rel']) ? $settings['linked_field']['advanced']['rel'] : '';
  $text = isset($settings['linked_field']['advanced']['text']) ? $settings['linked_field']['advanced']['text'] : '';

  $summary_items = array();
  $summary_items[] = t('Destination: @destination', array('@destination' => $destination));

  if ($title) {
    $summary_items[] = t('Title: @title', array('@title' => $title));
  }

  if ($target) {
    $summary_items[] = t('Target: <code>@target</code>', array('@target' => $target));
  }

  if ($class) {
    $summary_items[] = t('Class: <code>@class</code>', array('@class' => $class));
  }

  if ($rel) {
    $summary_items[] = t('Relationship: <code>@rel</code>', array('@rel' => $rel));
  }

  if ($text) {
    $summary_items[] = t('Text: @text', array('@text' => $text));
  }

  if ($linked && $destination) {
    $summary .= theme('item_list', array('items' => $summary_items, 'title' => 'Linked Field'));
  }
  else {
    $summary .= ' ';
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function linked_field_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field = $context['field'];
  $entity_type = $context['instance']['entity_type'];
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $settings['linked_field']['linked'] = isset($settings['linked_field']['linked']) ? $settings['linked_field']['linked'] : 0;
  $settings['linked_field']['destination'] = isset($settings['linked_field']['destination']) ? $settings['linked_field']['destination'] : '';
  $settings['linked_field']['title'] = isset($settings['linked_field']['advanced']['title']) ? $settings['linked_field']['advanced']['title'] : '';
  $settings['linked_field']['target'] = isset($settings['linked_field']['advanced']['target']) ? $settings['linked_field']['advanced']['target'] : '';
  $settings['linked_field']['class'] = isset($settings['linked_field']['advanced']['class']) ? $settings['linked_field']['advanced']['class'] : '';
  $settings['linked_field']['rel'] = isset($settings['linked_field']['advanced']['rel']) ? $settings['linked_field']['advanced']['rel'] : '';
  $settings['linked_field']['text'] = isset($settings['linked_field']['advanced']['text']) ? $settings['linked_field']['advanced']['text'] : '';

  $settings_form['linked_field'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('linked-field-linked-wrapper')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'linked_field') . '/css/linked-field.css',
      ),
    ),
  );

  $settings_form['linked_field']['linked'] = array(
    '#title' => t('Link this field'),
    '#type' => 'checkbox',
    '#default_value' => $settings['linked_field']['linked'],
  );

  $settings_form['linked_field']['destination'] = array(
    '#title' => t('Destination'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['destination'],
    '#description' => t('Here you can enter a token which will be used as link url.'),
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['advanced'] = array(
    '#title' => t('Advanced'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['advanced']['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['title'],
    '#description' => t('Here you can enter a token which will be used as link <em>title</em> attribute.'),
  );

  $settings_form['linked_field']['advanced']['target'] = array(
    '#title' => t('Target'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['target'],
    '#description' => t('Here you can enter a token which will be used as link <em>target</em> attribute..'),
  );

  $settings_form['linked_field']['advanced']['class'] = array(
    '#title' => t('Class'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['rel'],
    '#description' => t('Here you can enter a token which will be used as link <em>class</em> attribute.'),
  );

  $settings_form['linked_field']['advanced']['rel'] = array(
    '#title' => t('Relationship'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['rel'],
    '#description' => t('Here you can enter a token which will be used as link <em>rel</em> attribute.'),
  );

  $settings_form['linked_field']['advanced']['text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['text'],
    '#description' => t('Here you can enter a token which will be used as link text.'),
  );

  $settings_form['linked_field']['token'] = array(
    '#type' => 'container',
    '#children' => theme('token_tree', array('token_types' => array($entity_type))),
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

}

/**
 * Implements hook_field_attach_view_alter().
 */
function linked_field_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = $output[$field_name];
    $view_modes = field_view_mode_settings($element['#entity_type'], $element['#bundle']);
    if (isset($view_modes[$context['view_mode']]) && !$view_modes[$context['view_mode']]['custom_settings']) {
      $context['view_mode'] = 'default';
    }

    $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
    $display = isset($instance['display'][$context['view_mode']]) ? $instance['display'][$context['view_mode']] : $instance['display']['default'];
    $settings = $display['settings'];

    // Continue when no linked field settings were found.
    if (!count($settings['linked_field']) || !$settings['linked_field']['linked']) {
      continue;
    }

    // Normalize the settings.
    $linked = $settings['linked_field']['linked'];
    $destination = $settings['linked_field']['destination'];
    $title = isset($settings['linked_field']['advanced']['title']) ? $settings['linked_field']['advanced']['title'] : '';
    $target = isset($settings['linked_field']['advanced']['target']) ? $settings['linked_field']['advanced']['target'] : '';
    $class = isset($settings['linked_field']['advanced']['class']) ? $settings['linked_field']['advanced']['class'] : '';
    $rel = isset($settings['linked_field']['advanced']['rel']) ? $settings['linked_field']['advanced']['rel'] : '';
    $text = isset($settings['linked_field']['advanced']['text']) ? $settings['linked_field']['advanced']['text'] : '';

    // If the destination field isn't filled for this field, we shouldn't
    // do anything. Continue to the next field.
    if (!$destination || !$linked) {
      continue;
    }

    // Only modify the element when the token_replace really replace sth.
    $path = token_replace($destination, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $title = token_replace($title, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $target = token_replace($target, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $class = token_replace($class, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $rel = token_replace($rel, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $text = token_replace($text, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));

    if ($path != '') {
      // Generate a correct link.
      $path = url($path);

      // Building the attributes for the link.
      $attributes = array(
        'href' => $path,
        'title' => $title,
        'target' => $target,
        'class' => $class,
        'rel' => $rel,
      );

      foreach (element_children($element) as $delta) {
        if (!$text) {
          $rendered = drupal_render($element[$delta]);
        }
        else {
          $rendered = $text;
        }
        // Convert HTML code to a DOMDocument object.
        $html_dom = filter_dom_load($rendered);
        // Getting the <body> element.
        $body = $html_dom->getElementsByTagName('body');
        $nodes = $body->item(0);

        // Recursively walk over the DOMDocument body and place the links.
        linked_field_link_field($nodes, $html_dom, $attributes);

        // Converting the DOMDocument object back to HTML code.
        $rendered = filter_dom_serialize($html_dom);
        $output[$field_name][$delta] = array('#markup' => $rendered);
      }
    }
  }
}

/**
 * Recursive function for linking text parts and images in DOMNodes.
 *
 * @param DOMNode $node
 *   An object which gets investigated.
 * @param DOMDocument $dom
 *   An object which represents an entire HTML or XML document.
 * @param array $attributes
 *   An array containing element attributes.
 */
function linked_field_link_field($node, $dom, $attributes) {
  if ($node->hasChildNodes() && $node->nodeName != 'a') {
    $c = $node->childNodes->length;
    for ($i = $c; $i > 0; --$i) {
      $child = $node->childNodes->item($i - 1);
      linked_field_link_field($child, $dom, $attributes);
      if ($child->nodeType == XML_TEXT_NODE) {
        $text = $child->textContent;
        if (strlen(trim($text))) {
          // Create new <a> element, set the text and the href attribute.
          $element = $dom->createElement('a', $text);

          // Adding the attributes.
          foreach ($attributes as $name => $value) {
            if ($value) {
              $element->setAttribute($name, $value);
            }
          }

          // Replace the the original element with the new one.
          $node->replaceChild($element, $child);
        }
      }
      elseif ($child->nodeName == 'img') {
        // Create new <a> element, set the href and append the image.
        $element = $dom->createElement('a');

        // Adding the attributes.
        foreach ($attributes as $name => $value) {
          $element->setAttribute($name, $value);
        }

        $node->replaceChild($element, $child);
        $element->appendChild($child);
      }
    }
  }
}
