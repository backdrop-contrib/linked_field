<?php

/**
 * @file
 * Module that gives you a field formatter, which enables you to link field
 * contents to a destination.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function linked_field_field_formatter_info_alter(&$infos) {
  foreach ($infos as &$info) {
    $info['settings']['linked_field']['linked'] = FALSE;
    $info['settings']['linked_field']['destination'] = '';
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function linked_field_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if (!isset($settings['linked_field'])) {
    return;
  }

  // Normalize the settings.
  $linked = $settings['linked_field']['linked'];
  $destination = $settings['linked_field']['destination'];

  if ($linked && $destination) {
    $summary .= '<br />' . t('Linked to: @destination', array('@destination' => $destination));
  }
  else {
    $summary .= ' ';
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function linked_field_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field = $context['field'];
  $entity_type = $context['instance']['entity_type'];
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if (!isset($settings['linked_field'])) {
    return;
  }

  $settings['linked_field']['linked'] = isset($settings['linked_field']['linked']) ? $settings['linked_field']['linked'] : FALSE;
  $settings['linked_field']['destination'] = isset($settings['linked_field']['destination']) ? $settings['linked_field']['destination'] : '';

  $settings_form['linked_field'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('linked-field-linked-wrapper')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'linked_field') . '/css/linked-field.css',
      ),
    ),
  );

  $settings_form['linked_field']['linked'] = array(
    '#title' => t('Link this field'),
    '#type' => 'checkbox',
    '#default_value' => $settings['linked_field']['linked'],
  );

  $settings_form['linked_field']['destination'] = array(
    '#title' => t('Destination'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['destination'],
    '#element_validate' => array('token_element_validate'),
    '#description' => t('Here you can enter a token which will be used as link url.'),
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['token'] = array(
    '#type' => 'container',
    '#children' => theme('token_tree', array('token_types' => array($entity_type))),
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_field_attach_view_alter().
 */
function linked_field_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = $output[$field_name];
    $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
    $display = isset($instance['display'][$context['view_mode']]) ? $instance['display'][$context['view_mode']] : $instance['display']['default'];
    $settings = $display['settings'];

    // Continue when no linked field settings were found.
    if (!isset($settings['linked_field'])) {
      continue;
    }

    // Normalize the settings.
    $linked = $settings['linked_field']['linked'];
    $destination = $settings['linked_field']['destination'];

    // If the destination field isn't filled for this field, we shouldn't
    // do anything. Continue to the next field.
    if (!$destination || !$linked) {
      continue;
    }

    // Only modify the element when the token_replace really replace sth.
    $path = token_replace($destination, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $rendered = drupal_render($element);
    if ($path != '') {
      // Generate a correct link.
      $path = url($path);
      // Convert HTML code to a DOMDocument object.
      $html_dom = filter_dom_load($rendered);
      // Getting the <body> element.
      $body = $html_dom->getElementsByTagName('body');
      $nodes = $body->item(0);

      // Recursively walk over the DOMDocument body and place the links.
      linked_field_link_field($nodes, $html_dom, $path);

      // Converting the DOMDocument object back to HTML code.
      $rendered = filter_dom_serialize($html_dom);
    }

    // Add the rendered code as markup.
    $output[$field_name] = array(
      '#markup' => $rendered,
    );

    // Copy properties from the original field output to the new output like
    // weight and access which should remain the same.
    $shared_keys = array(
      '#weight',
      '#access',
      '#view_mode',
      '#language',
      '#field_name',
      '#field_type',
      '#entity_type',
      '#bundle',
      '#object',
      '#items',
    );

    $output[$field_name] += array_intersect_key($element, drupal_map_assoc($shared_keys));
  }
}

/**
 * Recursive function for linking text parts and images in DOMNodes.
 *
 * @param DOMNode $node
 *   An object which gets investigated.
 * @param DOMDocument $dom
 *   An object which represents an entire HTML or XML document.
 * @param string $path
 *   The destination for the link.
 */
function linked_field_link_field($node, $dom, $path) {
  if ($node->hasChildNodes() && $node->nodeName != 'a') {
    $c = $node->childNodes->length;
    for ($i = $c; $i > 0; --$i) {
      $child = $node->childNodes->item($i - 1);
      linked_field_link_field($child, $dom, $path);
      if ($child->nodeType == XML_TEXT_NODE) {
        $text = $child->textContent;
        if (strlen(trim($text))) {
          // Create new <a> element, set the text and the href attribute.
          $element = $dom->createElement('a', $child->textContent);
          $element->setAttribute('href', $path);
          // Replace the the original element with the new one.
          $node->replaceChild($element, $child);
        }
      }
      elseif ($child->nodeName == 'img') {
        // Create new <a> element, set the href and append the image.
        $element = $dom->createElement('a');
        $element->setAttribute('href', $path);
        $node->replaceChild($element, $child);
        $element->appendChild($child);
      }
    }
  }
}
