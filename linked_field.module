<?php
/**
 * @file
 * Module that gives you a field formatter, which enables you to link field contents to a destination.
 */

/**
 * Function to gather supported field formatters.
 */
function linked_field_supported_formatters() {
  $formatters = array(
    'image',
    'text_plain',
  );

  // Allow other modules to alter the supported fields.
  drupal_alter('linked_field_supported_formatters', $formatters);

  return $formatters;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function linked_field_field_formatter_info_alter(&$info) {
  $supported = linked_field_supported_formatters();

  foreach ($supported as $s) {
    $info[$s]['settings']['linked_field']['linked'] = FALSE;
    $info[$s]['settings']['linked_field']['destination'] = '';
    $info[$s]['settings']['linked_field']['wrapper'] = '';
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function linked_field_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if(!isset($settings['linked_field'])) {
    return;
  }

  // Normalize the settings.
  $linked = $settings['linked_field']['linked'];
  $destination = $settings['linked_field']['destination'];
  $wrapper = $settings['linked_field']['wrapper'];

  $supported = linked_field_supported_formatters();

  if (in_array($display['type'], $supported)) {
    if ($linked && $destination) {
      $summary .= '<br />' . t('Linked to: @destination', array('@destination' => $destination));
      if($wrapper) {
        $summary .= '<br />' . t('Wrapped by @wrapper', array('@wrapper' => $wrapper));
      }
    }
    else {
      $summary .= ' ';
    }
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function linked_field_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field = $context['field'];
  $entity_type = $context['instance']['entity_type'];
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if(!isset($settings['linked_field'])) {
    return;
  }

  $supported = linked_field_supported_formatters();

  $settings['linked_field']['linked'] = isset($settings['linked_field']['linked']) ? $settings['linked_field']['linked'] : FALSE;
  $settings['linked_field']['destination'] = isset($settings['linked_field']['destination']) ? $settings['linked_field']['destination'] : '';
  $settings['linked_field']['wrapper'] = isset($settings['linked_field']['wrapper']) ? $settings['linked_field']['wrapper'] : '';

  if (in_array($display['type'], $supported)) {
    $settings_form['linked_field'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('linked-field-linked-wrapper')),
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'linked_field') . '/css/linked-field.css'
        ),
      ),
    );

    $settings_form['linked_field']['linked'] = array(
      '#title' => t('Link this field'),
      '#type' => 'checkbox',
      '#default_value' => $settings['linked_field']['linked'],
    );

    $settings_form['linked_field']['destination'] = array(
      '#title' => t('Destination'),
      '#type' => 'textfield',
      '#default_value' => $settings['linked_field']['destination'],
      // @TODO: Add validation function!
      //'#required' => TRUE,
      '#element_validate' => array('token_element_validate'),
      '#description' => t('Here you can enter a token which will be used as link url.'),
      '#states' => array(
        'visible' => array(
          'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
        ),
      ),
    );

    $settings_form['linked_field']['token'] = array(
      '#type' => 'container',
      '#children' => theme('token_tree', array('token_types' => array($entity_type))),
      '#states' => array(
        'visible' => array(
          'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
        ),
      ),
    );

    $settings_form['linked_field']['wrapper'] = array(
      '#title' => t('Wrapper'),
      '#type' => 'select',
      '#options' => array(
        '' => t('None'),
        'div' => 'DIV',
        'span' => 'SPAN',
        'h1' => 'H1',
        'h2' => 'H2',
        'h3' => 'H3',
        'h4' => 'H4',
        'h5' => 'H5',
        'h6' => 'H6',
        'p' => 'P',
        'strong' => 'STRONG',
        'em' => 'EM',
      ),
      '#default_value' => ($settings['linked_field']['wrapper']) ? $settings['linked_field']['wrapper'] : '',
      '#description' => t('Here you can select a wrapper for the link.'),
      '#states' => array(
        'visible' => array(
          'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function linked_field_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = $output[$field_name];
    $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
    $display = isset($instance['display'][$context['view_mode']]) ? $instance['display'][$context['view_mode']] : $instance['display']['default'];
    $settings = $display['settings'];

    // Continue when no linked field settings were found.
    if(!isset($settings['linked_field'])) {
      continue;
    }

    // Getting supported field formatters.
    $supported = linked_field_supported_formatters();

    if (in_array($output[$field_name]['#formatter'], $supported)) {
      // Normalize the settings.
      $linked = $settings['linked_field']['linked'];
      $destination = $settings['linked_field']['destination'];
      $wrapper = $settings['linked_field']['wrapper'];

      // If the destination field isn't filled for this field, we shouldn't
      // do anything. Continue to the next field.
      if (!$destination) {
        continue;
      }

      // Only modify the element when the token_replace really replace sth.
      $path = token_replace($destination, array($element['#entity_type'] => $element['#object']));
      $rendered = drupal_render($element);
      if ($path != $destination) {
        // Wrapping the source element into a link.
        $output[$field_name] = array(
          '#theme' => 'link',
          '#text' => field_filter_xss($rendered),
          '#path' => token_replace($destination, array($element['#entity_type'] => $element['#object'])),
          '#options' => array(
            'attributes' => array(),
            'html' => TRUE,
          ),
        );
      } else {
        // Otherwise we just render the field.
        $output[$field_name] = array(
          '#markup' => $rendered,
        );
      }

      // Adding the prefix and suffix.
      $output[$field_name] += array(
        '#prefix' => ($wrapper) ? '<' . $wrapper . '>' : '',
        '#suffix' => ($wrapper) ? '</' . $wrapper . '>' : '',
      );

      // Copy properties from the original field output to the new output like
      // weight and access which should remain the same.
      $shared_keys = array(
        '#weight',
        '#access',
        '#view_mode',
        '#language',
        '#field_name',
        '#field_type',
        '#entity_type',
        '#bundle',
        '#object',
        '#items',
      );

      $output[$field_name] += array_intersect_key($element, drupal_map_assoc($shared_keys));
    }
  }
}
