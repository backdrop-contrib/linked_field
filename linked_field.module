<?php

/**
 * @file
 * Module that gives you a field formatter, which enables you to link field contents to a destination.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function linked_field_field_formatter_info_alter(&$infos) {
  foreach ($infos as &$info) {
    $info['settings']['linked_field']['linked'] = FALSE;
    $info['settings']['linked_field']['destination'] = '';
    $info['settings']['linked_field']['wrapper'] = '';
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function linked_field_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if (!isset($settings['linked_field'])) {
    return;
  }

  // Normalize the settings.
  $linked = $settings['linked_field']['linked'];
  $destination = $settings['linked_field']['destination'];
  $wrapper = $settings['linked_field']['wrapper'];

  if ($linked && $destination) {
    $summary .= '<br />' . t('Linked to: @destination', array('@destination' => $destination));
    if ($wrapper) {
      $summary .= '<br />' . t('Wrapped by @wrapper', array('@wrapper' => $wrapper));
    }
  }
  else {
    $summary .= ' ';
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function linked_field_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field = $context['field'];
  $entity_type = $context['instance']['entity_type'];
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if (!isset($settings['linked_field'])) {
    return;
  }

  $settings['linked_field']['linked'] = isset($settings['linked_field']['linked']) ? $settings['linked_field']['linked'] : FALSE;
  $settings['linked_field']['destination'] = isset($settings['linked_field']['destination']) ? $settings['linked_field']['destination'] : '';
  $settings['linked_field']['wrapper'] = isset($settings['linked_field']['wrapper']) ? $settings['linked_field']['wrapper'] : '';

  $settings_form['linked_field'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('linked-field-linked-wrapper')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'linked_field') . '/css/linked-field.css'
      ),
    ),
  );

  $settings_form['linked_field']['linked'] = array(
    '#title' => t('Link this field'),
    '#type' => 'checkbox',
    '#default_value' => $settings['linked_field']['linked'],
  );

  $settings_form['linked_field']['destination'] = array(
    '#title' => t('Destination'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['destination'],
    // @TODO: Add validation function!
    //'#required' => TRUE,
    '#element_validate' => array('token_element_validate'),
    '#description' => t('Here you can enter a token which will be used as link url.'),
    '#states' => array(
      'visible' => array(
        'input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['token'] = array(
    '#type' => 'container',
    '#children' => theme('token_tree', array('token_types' => array($entity_type))),
    '#states' => array(
      'visible' => array(
        'input[name$="fields[' . $field['field_name'] . '][settings_edit_form][settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['wrapper'] = array(
    '#title' => t('Wrapper'),
    '#type' => 'select',
    '#options' => array(
      '' => t('None'),
      'div' => 'DIV',
      'span' => 'SPAN',
      'h1' => 'H1',
      'h2' => 'H2',
      'h3' => 'H3',
      'h4' => 'H4',
      'h5' => 'H5',
      'h6' => 'H6',
      'p' => 'P',
      'strong' => 'STRONG',
      'em' => 'EM',
    ),
    '#default_value' => ($settings['linked_field']['wrapper']) ? $settings['linked_field']['wrapper'] : '',
    '#description' => t('Here you can select a wrapper for the link.'),
    '#states' => array(
      'visible' => array(
        'input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_field_attach_view_alter().
 */
function linked_field_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
    $display = isset($instance['display'][$context['view_mode']]) ? $instance['display'][$context['view_mode']] : $instance['display']['default'];
    $settings = $display['settings'];

    // Continue when no linked field settings were found.
    if (!isset($settings['linked_field'])) {
      continue;
    }

    // Normalize the settings.
    $linked = $settings['linked_field']['linked'];
    $destination = $settings['linked_field']['destination'];
    $wrapper = $settings['linked_field']['wrapper'];

    // If the destination field isn't filled for this field, we shouldn't
    // do anything. Continue to the next field.
    if (!$destination || !$linked) {
      continue;
    }

    // Only modify the element when the token_replace really replace sth.
    $path = token_replace($destination, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    if ($path != '') {
      // Render the field contents
      $html_string = drupal_render($element);

      // Modify the html code
      linked_field_prepare_link_field($html_string, $path);

      $element = array(
        '#markup' => $html_string,
      );
    }
    else {
      // Otherwise we just render the field.
      $element = array(
        '#markup' => drupal_render($element),
      );
    }

    // Adding the prefix and suffix.
    $element += array(
      '#prefix' => ($wrapper) ? '<' . $wrapper . '>' : '',
      '#suffix' => ($wrapper) ? '</' . $wrapper . '>' : '',
    );
  }
}

/**
 * Creates a DOMDocument object, linkes the relevant parts of the tree.
 */
function linked_field_prepare_link_field(&$text, $path) {
  $html_dom = filter_dom_load($text);
  $body = $html_dom->getElementsByTagName('body');
  $nodes = $body->item(0);
  
  // Recursively walk over the DOMDocument body and place the links.
  linked_field_link_field($nodes, $html_dom, $path);
  
  $text = filter_dom_serialize($html_dom);
}

/**
 * Recursive function for linking text parts and images in DOMNodes.
 */
function linked_field_link_field($nodes, $dom, $path) {
  if ($nodes->hasChildNodes() && $nodes->nodeName != 'a') {
    $c = $nodes->childNodes->length;
    for ($i = $c; $i > 0; --$i) {
      $node = $nodes->childNodes->item($i - 1);
      linked_field_link_field($node, $dom, $path);
      if ($node->nodeType == XML_TEXT_NODE) {
        $text = $node->textContent;
        if (strlen(trim($text))) {
          // Wrap this text node.
          $element = $dom->createElement('a', $node->textContent);
          $element->setAttribute('href', $path);
          $nodes->replaceChild($element, $node);
        }
      }
      else if ($node->nodeName == 'img') {
        // Wrap this img node.
        $element = $dom->createElement('a');
        $element->setAttribute('href', $path);
        $nodes->replaceChild($element, $node);
        $element->appendChild($node);
      }
    }
  }
}
